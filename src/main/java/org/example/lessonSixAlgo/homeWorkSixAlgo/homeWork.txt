Level 1

Приведите несколько примеров применения хеш-функций в реальной жизни.
Создайте публичный ключ RSA и скиньте его в открытом виде.

1. Хранение паролей: При создании учетных записей веб-сервисов
пароли пользователей обычно хешируются и сохраняются в базе данных.
При аутентификации пользователей система сравнивает хеш введенного пароля с сохраненным хешем.

2. Цифровые подписи: Хеш-функции используются для создания и проверки цифровых подписей в криптографии.
Подпись генерируется путем хеширования сообщения и последующего шифрования полученного хеша закрытым ключом.

3. Контроль целостности данных: При скачивании файлов из Интернета хеш-суммы файлов иногда предоставляются для
проверки целостности данных.
Пользователь может сравнить полученную хеш-сумму с известной хеш-суммой файла, чтобы убедиться,
что файл не был изменен в процессе передачи.

Публичный ключ RSA:

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyJ0ct9MhgQbW0LAWgv6R
RZQsQoPONa/1cWIsA1EjJ9zuspfJcx9GFWnEvyOZagNAf4JnfOVIumFJ4mlIdhJH
FiyIuId20LsFTssVzudjlfq/02EXmLq3fOZMUa0btoLvAeCFRInEWUGyEmeS7eBA
lVJo4A0vDdhhXp2dJ5cQL/hxPqDmxbc3G3Eym/8VVvGFjti4o3grGSgDeaz07O/U
G3+bFw7hflm9EjXrlZ64Pbi+4fuvPVhWu8ENuciLwTjrwCLZ6bh73+SFFxCCqWt2
RcVMN+YdMKRK/adWarttuEKWFxPEO9ZjugTpToWtKIWgXNnmBiL9E7u+JEXbu+IF
jwIDAQAB
-----END PUBLIC KEY-----

=================================================================

Level 2


Изучить несколько различных алгоритмов хеширования, таких как MD5, SHA-1, SHA-256 и SHA-512.

1 MD5 (Message Digest Algorithm 5): MD5 принимает на вход сообщение произвольной длины и возвращает
фиксированный хеш-код длиной 128 бит (16 байт).
Алгоритм состоит из серии простых логических операций,
таких как сдвиги бит, побитовые операции и добавление констант.
Однако MD5 имеет ряд серьезных недостатков, включая уязвимости к коллизиям,
что означает возможность создания двух разных сообщений с одинаковым хешем.

SHA-1 (Secure Hash Algorithm 1): SHA-1 принимает на вход сообщение произвольной длины и возвращает
хеш-код длиной 160 бит (20 байт).
Алгоритм SHA-1 использует более сложную структуру, чем MD5,
включая большее количество раундов и более сложные логические операции.
Однако SHA-1 также стал уязвимым к коллизиям, и его использование для криптографических целей не рекомендуется.

SHA-256 (Secure Hash Algorithm 256): SHA-256 является одним из вариантов семейства алгоритмов SHA-2 и возвращает
хеш-код длиной 256 бит (32 байта).
Алгоритм SHA-256 использует более сложные логические операции и имеет большее количество раундов,
чем SHA-1, что делает его более безопасным.
SHA-256 остается одним из наиболее распространенных алгоритмов хеширования на сегодняшний день.

SHA-512 (Secure Hash Algorithm 512): SHA-512 также является частью семейства SHA-2 и возвращает хеш-код
длиной 512 бит (64 байта).
Этот алгоритм использует еще более сложную структуру и большее количество раундов,
чем SHA-256, что делает его еще более безопасным.
SHA-512 обеспечивает более высокий уровень безопасности и часто используется в криптографических
протоколах и приложениях, требующих высокую степень защиты.
============================

Исследовать примеры применения хешей в реальном мире, такие как Bitcoin, блокчейн, пароли и другие.

Примеры применения хешей в реальном мире:

Bitcoin и блокчейн: Блокчейн использует хеш-функции,
такие как SHA-256, для создания уникальных идентификаторов для блоков данных.
Хеш каждого блока зависит от содержимого предыдущего блока,
обеспечивая непрерывную цепь блоков и защиту от подделки данных.

Пароли: Хеширование паролей с использованием хеш-функций, таких как MD5, SHA-1, SHA-256 и SHA-512,
обеспечивает защиту конфиденциальности пользовательских учетных записей.
При аутентификации пользователей система сравнивает хеш введенного пароля с сохраненным хешем в базе данных.

Цифровые подписи: Криптографические протоколы, такие как RSA, используют
хеш-функции для создания и проверки цифровых подписей. Хеш-сумма сообщения
подписывается с использованием закрытого ключа отправителя и проверяется с помощью открытого ключа получателя.